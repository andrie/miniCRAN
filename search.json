[{"path":"https://andrie.github.io/miniCRAN/articles/miniCRAN-dependency-graph.html","id":"a-worked-example-using-the-package-chron","dir":"Articles","previous_headings":"","what":"A worked example using the package chron","title":"Using miniCRAN to identify package dependencies","text":"function pkgDep() exposes dependencies, also recursive dependencies. words, answers question packages need installed satisfy dependencies dependencies. means algorithm follows: First retrieve list Suggests Enhances, using non-recursive dependency search Next, perform recursive search Imports, Depends LinkingTo resulting list packages contain complete list necessary satisfy dependencies. code: create igraph plot dependencies, use function makeDepGraph() plot results:  Note dependencies expand zoo (enhanced), scales ggplot (suggested) recursively get Imports LinkingTo dependencies.","code":"library(\"miniCRAN\") tags <- \"chron\" pkgDep(tags, availPkgs = cranJuly2014) ##  [1] \"chron\"        \"RColorBrewer\" \"dichromat\"    \"munsell\"      \"plyr\"         ##  [6] \"labeling\"     \"colorspace\"   \"Rcpp\"         \"digest\"       \"gtable\"       ## [11] \"reshape2\"     \"scales\"       \"proto\"        \"MASS\"         \"stringr\"      ## [16] \"ggplot2\" dg <- makeDepGraph(tags, enhances = TRUE, availPkgs = cranJuly2014) set.seed(1) plot(dg, legendPosition = c(-1, 1), vertex.size = 20)"},{"path":"https://andrie.github.io/miniCRAN/articles/miniCRAN-dependency-graph.html","id":"an-example-with-multiple-input-packages","dir":"Articles","previous_headings":"","what":"An example with multiple input packages","title":"Using miniCRAN to identify package dependencies","text":"final example, create dependency graph seven popular R packages:","code":"tags <- c(\"ggplot2\", \"data.table\", \"plyr\", \"knitr\", \"shiny\", \"xts\", \"lattice\") pkgDep(tags, suggests = TRUE, enhances = FALSE, availPkgs = cranJuly2014) ##  [1] \"ggplot2\"      \"data.table\"   \"plyr\"         \"knitr\"        \"shiny\"        ##  [6] \"xts\"          \"lattice\"      \"digest\"       \"gtable\"       \"reshape2\"     ## [11] \"scales\"       \"proto\"        \"MASS\"         \"Rcpp\"         \"stringr\"      ## [16] \"RColorBrewer\" \"dichromat\"    \"munsell\"      \"labeling\"     \"colorspace\"   ## [21] \"evaluate\"     \"formatR\"      \"highr\"        \"markdown\"     \"mime\"         ## [26] \"httpuv\"       \"caTools\"      \"RJSONIO\"      \"xtable\"       \"htmltools\"    ## [31] \"bitops\"       \"zoo\"          \"SparseM\"      \"survival\"     \"Formula\"      ## [36] \"latticeExtra\" \"cluster\"      \"maps\"         \"sp\"           \"foreign\"      ## [41] \"mvtnorm\"      \"TH.data\"      \"sandwich\"     \"nlme\"         \"Matrix\"       ## [46] \"bit\"          \"codetools\"    \"iterators\"    \"timeDate\"     \"quadprog\"     ## [51] \"Hmisc\"        \"BH\"           \"quantreg\"     \"mapproj\"      \"hexbin\"       ## [56] \"maptools\"     \"multcomp\"     \"testthat\"     \"mgcv\"         \"chron\"        ## [61] \"reshape\"      \"fastmatch\"    \"bit64\"        \"abind\"        \"foreach\"      ## [66] \"doMC\"         \"itertools\"    \"testit\"       \"rgl\"          \"XML\"          ## [71] \"RCurl\"        \"Cairo\"        \"timeSeries\"   \"tseries\"      \"its\"          ## [76] \"fts\"          \"tis\"          \"KernSmooth\" dg <- makeDepGraph(tags, enhances = TRUE, availPkgs = cranJuly2014) set.seed(1) plot(dg, legendPosition = c(-1, -1), vertex.size = 10, cex = 0.7)"},{"path":"https://andrie.github.io/miniCRAN/articles/miniCRAN-introduction.html","id":"install-packages-from-your-local-repository","dir":"Articles","previous_headings":"","what":"Install packages from your local repository","title":"Using miniCRAN to create and maintain a local CRAN repository","text":"install packages local repository, need use Uniform Resource Identifier (URI) convention file:/// point file location.","code":"install.packages(pkgs,                   repos = paste0(\"file:///\", pth),                  type = \"source\")"},{"path":[]},{"path":"https://andrie.github.io/miniCRAN/articles/miniCRAN-introduction.html","id":"adding-new-packages-from-cran","dir":"Articles","previous_headings":"Adding packages to an existing miniCRAN repository","what":"Adding new packages from CRAN","title":"Using miniCRAN to create and maintain a local CRAN repository","text":"creating local miniCRAN repository, additional packages dependencies can easily added. mechanism can also used re-add existing package miniCRAN repo. value returned (invisibly) via addPackage number packages written index file, .e., total number packages repo type.","code":"# Add new packages (from CRAN) to the miniCRAN repo addPackage(\"Matrix\", path = pth, repos = mirror, type = c(\"source\", \"win.binary\")) pkgAvail(repos = pth, type = \"win.binary\")[, c(1:3, 5)]"},{"path":"https://andrie.github.io/miniCRAN/articles/miniCRAN-introduction.html","id":"adding-an-older-version-of-a-package-from-cran","dir":"Articles","previous_headings":"Adding packages to an existing miniCRAN repository","what":"Adding an older version of a package from CRAN","title":"Using miniCRAN to create and maintain a local CRAN repository","text":"add specific version package CRAN (another CRAN-like repository), can easily download source packages CRAN archives. Dependencies old package versions determined automatically must specified user. Note: order add binaries older packages, need download source build binaries intended platform . need appropriate R development tools installed order build package binaries source. get warning whenever multiple versions package saved repository. Currently, need manually remove duplicate versions rebuilding repositoryâ€™s package index. Note: last step important, otherwise may end repo inconsistent state. see updated list packages available miniCRAN repo:","code":"# create a data frame with the package and version info oldVers <- data.frame(   package = c(\"foreach\", \"codetools\", \"iterators\"),   version = c(\"1.4.0\", \"0.2-7\", \"1.0.5\"),   stringsAsFactors = FALSE )  # download old source package version and create repo index addOldPackage(pkgList, path = pth, vers = oldVers$version, repos = mirror, type = \"source\") # List package versions in the miniCRAN repo (produces warning about duplicates) pkgVersionsSrc <- checkVersions(pkgList, path = pth, type = \"source\") pkgVersionsBin <- checkVersions(pkgList, path = pth, type = \"win.binary\")  # After inspecting package versions, remove old versions basename(pkgVersionsSrc) # duplicate versions basename(pkgVersionsBin)  file.remove(pkgVersionsSrc[c(2,4,6)])  # rebuild the package index after removing duplicate package versions updateRepoIndex(pth, type = c(\"source\", \"win.binary\")) pkgAvail(pth, type = \"source\")[, c(1:3, 5)] # contains the old versions pkgAvail(pth, type = \"win.binary\")[, c(1:3, 5)] # contains the current versions"},{"path":"https://andrie.github.io/miniCRAN/articles/miniCRAN-introduction.html","id":"adding-packages-from-other-sources","dir":"Articles","previous_headings":"Adding packages to an existing miniCRAN repository","what":"Adding packages from other sources","title":"Using miniCRAN to create and maintain a local CRAN repository","text":"feature implemented future release.","code":""},{"path":"https://andrie.github.io/miniCRAN/articles/miniCRAN-introduction.html","id":"updating-the-packages-in-a-minicran-repository","dir":"Articles","previous_headings":"","what":"Updating the packages in a miniCRAN repository","title":"Using miniCRAN to create and maintain a local CRAN repository","text":"Checking updated versions packages currently stored miniCRAN repository: Update versions packages currently stored miniCRAN repository. default, prompt given confirm update package. prompt can suppressed using ask = FALSE, update packages. careful using option want keep certain packages older version.","code":"# Check if updated packages are available oldPackages(path = pth, repos = mirror, type = \"source\")[, 1:3] # should need update oldPackages(path = pth, repos = mirror, type = \"win.binary\")[, 1:3] # should be current # Update available packages updatePackages(path = pth, repos = mirror, type = \"source\", ask = FALSE) # should need update updatePackages(path = pth, repos = mirror, type = \"win.binary\", ask = FALSE) # should be current"},{"path":"https://andrie.github.io/miniCRAN/articles/miniCRAN-non-CRAN-repos.html","id":"using-cran","dir":"Articles","previous_headings":"","what":"Using CRAN","title":"Using repositories other than CRAN with miniCRAN","text":"URL master mirror Austria: output look like (albeit different packages version numbers):","code":"CRAN <- \"https://cran.r-project.org\" index(CRAN) Package         Version A3            \"A3\"            \"1.0.0\" AalenJohansen \"AalenJohansen\" \"1.0\"   AATtools      \"AATtools\"      \"0.0.2\" ABACUS        \"ABACUS\"        \"1.0.0\" abasequence   \"abasequence\"   \"0.1.0\""},{"path":"https://andrie.github.io/miniCRAN/articles/miniCRAN-non-CRAN-repos.html","id":"using-a-different-mirror","dir":"Articles","previous_headings":"","what":"Using a different mirror","title":"Using repositories other than CRAN with miniCRAN","text":"can also point mirror, example snapshot taken 2024-01-02 Posit Public Package Manager:","code":"p3m <- \"https://packagemanager.posit.co/cran/2024-01-02\" index(p3m)"},{"path":"https://andrie.github.io/miniCRAN/articles/miniCRAN-non-CRAN-repos.html","id":"using-r-forge","dir":"Articles","previous_headings":"","what":"Using R-forge","title":"Using repositories other than CRAN with miniCRAN","text":"R-forge CRAN-like structure:","code":"rforge <- \"https://r-forge.r-project.org\" index(rforge)"},{"path":"https://andrie.github.io/miniCRAN/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrie de Vries. Author, maintainer, copyright holder. Alex Chubaty. Contributor. Microsoft Corporation. Copyright holder.","code":""},{"path":"https://andrie.github.io/miniCRAN/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"de Vries (2024). miniCRAN: Create Mini Version CRAN Containing Selected Packages. R package version 0.3.0, https://github.com/andrie/miniCRAN.","code":"@Manual{,   title = {miniCRAN: Create a Mini Version of CRAN Containing Only Selected Packages},   author = {Andrie {de Vries}},   year = {2024},   note = {R package version 0.3.0},   url = {https://github.com/andrie/miniCRAN}, }"},{"path":"https://andrie.github.io/miniCRAN/index.html","id":"minicran-","dir":"","previous_headings":"","what":"Create a Mini Version of CRAN Containing Only Selected Packages","title":"Create a Mini Version of CRAN Containing Only Selected Packages","text":"Create mini version CRAN containing selected packages","code":""},{"path":"https://andrie.github.io/miniCRAN/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Create a Mini Version of CRAN Containing Only Selected Packages","text":"end 2014, CRAN consisted 6,000 packages, 2017 number doubled 12,000. Many organisations need maintain private mirror CRAN, subset packages relevant . miniCRAN package makes possible create internally consistent repository consisting selected packages CRAN-like repositories. user specifies set desired packages, miniCRAN recursively reads dependency tree packages, downloads subset.","code":""},{"path":[]},{"path":"https://andrie.github.io/miniCRAN/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation:","title":"Create a Mini Version of CRAN Containing Only Selected Packages","text":"Get stable version CRAN:","code":"install.packages(\"miniCRAN\") library(\"miniCRAN\")"},{"path":"https://andrie.github.io/miniCRAN/index.html","id":"development-version","dir":"","previous_headings":"Installation:","what":"Development version","title":"Create a Mini Version of CRAN Containing Only Selected Packages","text":"Get latest development version github:","code":"# Use `devtools` to install directly from github library(devtools) install_github(\"andrie/miniCRAN\")"},{"path":"https://andrie.github.io/miniCRAN/index.html","id":"example","dir":"","previous_headings":"","what":"Example:","title":"Create a Mini Version of CRAN Containing Only Selected Packages","text":"","code":"# Determine and download the packages `ggplot2`, `plyr` and `reshape2`,  # including their dependencies:  library(\"miniCRAN\") pkgs <- c(\"ggplot2\", \"plyr\", \"reshape2\") makeRepo(pkgDep(pkgs), path = file.path(tempdir(), \"miniCRAN\"))"},{"path":"https://andrie.github.io/miniCRAN/index.html","id":"supported-by-microsoft","dir":"","previous_headings":"","what":"Supported by Microsoft","title":"Create a Mini Version of CRAN Containing Only Selected Packages","text":"started project employed Revolution Analytics Microsoft. Microsoft kindly agreed maintain project individually, retains copyright work project October 2017.","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/addLocalPackage.html","id":null,"dir":"Reference","previous_headings":"","what":"Add local packages to a miniCRAN repository. â€” addLocalPackage","title":"Add local packages to a miniCRAN repository. â€” addLocalPackage","text":"Examine contents directory specified pkgPath pre-built packages matching names specified pkgs, add miniCRAN repository.","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/addLocalPackage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add local packages to a miniCRAN repository. â€” addLocalPackage","text":"","code":"addLocalPackage(   pkgs = NULL,   pkgPath = NULL,   path = NULL,   type = \"source\",   Rversion = R.version,   writePACKAGES = TRUE,   deps = FALSE,   quiet = FALSE,   build = FALSE )"},{"path":"https://andrie.github.io/miniCRAN/reference/addLocalPackage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add local packages to a miniCRAN repository. â€” addLocalPackage","text":"pkgs Character vector packages download pkgPath Character vector directory location containing packages added. Note pkgPath parent directory package (.e., package directory path constructed file.path(pkgPath, pkgs)). path Destination download path. path root folder new repository. type Possible values (currently) \"source\", \"mac.binary\" \"win.binary\": binary types can listed downloaded installed platforms.  Passed download.packages(). Rversion Version R (used type source.) Defaults R.version, can specified following formats: character string two digit R version, e.g. \"3.1\" list components major minor result getRversion() result R.version writePACKAGES TRUE, calls write_PACKAGES() update repository PACKAGES file. deps used. See note. quiet TRUE, suppress status messages (), progress bar download. build Logical indicating whether packages build prior adding.","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/addLocalPackage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add local packages to a miniCRAN repository. â€” addLocalPackage","text":"Installs packages returns new package index.","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/addLocalPackage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add local packages to a miniCRAN repository. â€” addLocalPackage","text":"build package source add , use build = TRUE. Note package development libraries devtools package must installed system order build packages.","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/addLocalPackage.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Add local packages to a miniCRAN repository. â€” addLocalPackage","text":"Currently, adding local packages check download dependencies.","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/addLocalPackage.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add local packages to a miniCRAN repository. â€” addLocalPackage","text":"Alex Chubaty","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/addLocalPackage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add local packages to a miniCRAN repository. â€” addLocalPackage","text":"","code":"if (FALSE) {  addLocalPackage(\"myPackage\", \"path/to/my/prebuilt/package\",                  \"path/to/my/miniCRAN/repo\")   addLocalPackage(\"myPackage\", \"path/to/my/package/sourcecode\",                  \"path/to/my/miniCRAN/repo\", build = TRUE) }"},{"path":"https://andrie.github.io/miniCRAN/reference/addOldPackage.html","id":null,"dir":"Reference","previous_headings":"","what":"Add old package versions to a miniCRAN repository. â€” addOldPackage","title":"Add old package versions to a miniCRAN repository. â€” addOldPackage","text":"download add older source package versions. Older binary versions normally available CRAN built source platform required. , specifying type!=\"source\" likely fail download successful.","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/addOldPackage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add old package versions to a miniCRAN repository. â€” addOldPackage","text":"","code":"addOldPackage(   pkgs = NULL,   path = NULL,   vers = NULL,   repos = getOption(\"repos\"),   type = \"source\",   Rversion = R.version,   writePACKAGES = TRUE,   deps = FALSE,   quiet = TRUE )"},{"path":"https://andrie.github.io/miniCRAN/reference/addOldPackage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add old package versions to a miniCRAN repository. â€” addOldPackage","text":"pkgs Character vector packages download path Destination download path. path root folder new repository. vers package version install. repos URL(s) 'contrib' sections repositories, e.g. \"https://cran.us.r-project.org\". Passed available.packages() type Possible values (currently) \"source\", \"mac.binary\" \"win.binary\": binary types can listed downloaded installed platforms.  Passed download.packages(). Rversion Version R (used type source.) Defaults R.version, can specified following formats: character string two digit R version, e.g. \"3.1\" list components major minor result getRversion() result R.version writePACKAGES TRUE, calls write_PACKAGES() update repository PACKAGES file. deps logical indicating whether package dependencies added (default TRUE). quiet TRUE, suppress status messages (), progress bar download.","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/addOldPackage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add old package versions to a miniCRAN repository. â€” addOldPackage","text":"Adds packages, rebuilds package index, invisibly returns number packages written index files.","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/addOldPackage.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Add old package versions to a miniCRAN repository. â€” addOldPackage","text":"Dependencies old package versions determined automatically must specified user pkgs vers. Thus, deps=FALSE default function.","code":""},{"path":[]},{"path":"https://andrie.github.io/miniCRAN/reference/addOldPackage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add old package versions to a miniCRAN repository. â€” addOldPackage","text":"","code":"### `checkVersions` and `add.packages.miniCRAN` require an existing miniCRAN repo  # Specify list of packages to download mirror <- c(CRAN = \"https://cloud.r-project.org\") mirror #>                          CRAN  #> \"https://cloud.r-project.org\"  pkgs <- c(\"foreach\") pkgTypes <- c(\"source\", \"win.binary\")  if (interactive()) {   if (!is.online()) {     message(\"p3m seems to be not available.  Check your internet connection.\")   } else {     pdb <- pkgAvail(repos = mirror, type = \"source\")   } } else {   pdb <- cranJuly2014 }   if (interactive()) {   if (!is.online()) {     message(\"p3m seems to be not available.  Check your internet connection.\")   } else {     pkgList <- pkgDep(pkgs, availPkgs = pdb, repos = mirror, type = \"source\", suggests = FALSE)     pkgList   } }  # Create temporary folder for miniCRAN  if (interactive()) {   if (!is.online()) {     message(\"p3m seems to be not available.  Check your internet connection.\")   } else {     dir.create(pth <- file.path(tempdir(), \"miniCRAN\"))          # Make repo for source and win.binary     makeRepo(pkgList, path = pth, repos = mirror, type = pkgTypes)          # Add other versions of a package (and assume these were added previously)     oldVers <- data.frame(       package = c(\"foreach\", \"codetools\", \"iterators\"),       version = c(\"1.4.0\", \"0.2-7\", \"1.0.5\"),       stringsAsFactors = FALSE     )     pkgs <- oldVers$package     addOldPackage(pkgs, path = pth, vers = oldVers$version, repos = mirror, type = \"source\")     # NOTE: older binary versions would need to be build from source          # List package versions in the miniCRAN repo (produces warning about duplicates)     pkgVersionsSrc <- checkVersions(pkgs, path = pth, type = \"source\")     pkgVersionsBin <- checkVersions(pkgs, path = pth, type = \"win.binary\")          # After inspecting package versions, remove old versions     basename(pkgVersionsSrc$source) # \"foreach_1.4.0.tar.gz\"  \"foreach_1.4.2.tar.gz\"     basename(pkgVersionsBin$win.binary) # \"foreach_1.4.0.zip\"     \"foreach_1.4.2.zip\"     file.remove(c(pkgVersionsSrc$source[1], pkgVersionsBin$win.binary[1]))          # Rebuild package index after adding/removing files     updateRepoIndex(pth, type = pkgTypes, Rversion = R.version)          pkgAvail(pth, type = \"source\")          # Add new packages (from CRAN) to the miniCRAN repo     addPackage(\"Matrix\", path = pth, repos = mirror, type = pkgTypes)          # Delete temporary folder     unlink(pth, recursive = TRUE)   } }"},{"path":"https://andrie.github.io/miniCRAN/reference/addPackage.html","id":null,"dir":"Reference","previous_headings":"","what":"Add packages to a miniCRAN repository. â€” addPackage","title":"Add packages to a miniCRAN repository. â€” addPackage","text":"Add packages miniCRAN repository.","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/addPackage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add packages to a miniCRAN repository. â€” addPackage","text":"","code":"addPackage(   pkgs = NULL,   path = NULL,   repos = getOption(\"repos\"),   type = \"source\",   Rversion = R.version,   writePACKAGES = TRUE,   deps = TRUE,   quiet = FALSE )"},{"path":"https://andrie.github.io/miniCRAN/reference/addPackage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add packages to a miniCRAN repository. â€” addPackage","text":"pkgs Character vector packages download path Destination download path. path root folder new repository. repos URL(s) 'contrib' sections repositories, e.g. \"https://cran.us.r-project.org\". Passed available.packages() type Possible values (currently) \"source\", \"mac.binary\" \"win.binary\": binary types can listed downloaded installed platforms.  Passed download.packages(). Rversion Version R (used type source.) Defaults R.version, can specified following formats: character string two digit R version, e.g. \"3.1\" list components major minor result getRversion() result R.version writePACKAGES TRUE, calls write_PACKAGES() update repository PACKAGES file. deps logical indicating whether package dependencies added (default TRUE). quiet TRUE, suppress status messages (), progress bar download.","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/addPackage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add packages to a miniCRAN repository. â€” addPackage","text":"Installs packages, rebuilds package index, invisibly returns number packages written index files.","code":""},{"path":[]},{"path":"https://andrie.github.io/miniCRAN/reference/addPackage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add packages to a miniCRAN repository. â€” addPackage","text":"","code":"### `checkVersions` and `add.packages.miniCRAN` require an existing miniCRAN repo  # Specify list of packages to download mirror <- c(CRAN = \"https://cloud.r-project.org\") mirror #>                          CRAN  #> \"https://cloud.r-project.org\"  pkgs <- c(\"foreach\") pkgTypes <- c(\"source\", \"win.binary\")  if (interactive()) {   if (!is.online()) {     message(\"p3m seems to be not available.  Check your internet connection.\")   } else {     pdb <- pkgAvail(repos = mirror, type = \"source\")   } } else {   pdb <- cranJuly2014 }   if (interactive()) {   if (!is.online()) {     message(\"p3m seems to be not available.  Check your internet connection.\")   } else {     pkgList <- pkgDep(pkgs, availPkgs = pdb, repos = mirror, type = \"source\", suggests = FALSE)     pkgList   } }  # Create temporary folder for miniCRAN  if (interactive()) {   if (!is.online()) {     message(\"p3m seems to be not available.  Check your internet connection.\")   } else {     dir.create(pth <- file.path(tempdir(), \"miniCRAN\"))          # Make repo for source and win.binary     makeRepo(pkgList, path = pth, repos = mirror, type = pkgTypes)          # Add other versions of a package (and assume these were added previously)     oldVers <- data.frame(       package = c(\"foreach\", \"codetools\", \"iterators\"),       version = c(\"1.4.0\", \"0.2-7\", \"1.0.5\"),       stringsAsFactors = FALSE     )     pkgs <- oldVers$package     addOldPackage(pkgs, path = pth, vers = oldVers$version, repos = mirror, type = \"source\")     # NOTE: older binary versions would need to be build from source          # List package versions in the miniCRAN repo (produces warning about duplicates)     pkgVersionsSrc <- checkVersions(pkgs, path = pth, type = \"source\")     pkgVersionsBin <- checkVersions(pkgs, path = pth, type = \"win.binary\")          # After inspecting package versions, remove old versions     basename(pkgVersionsSrc$source) # \"foreach_1.4.0.tar.gz\"  \"foreach_1.4.2.tar.gz\"     basename(pkgVersionsBin$win.binary) # \"foreach_1.4.0.zip\"     \"foreach_1.4.2.zip\"     file.remove(c(pkgVersionsSrc$source[1], pkgVersionsBin$win.binary[1]))          # Rebuild package index after adding/removing files     updateRepoIndex(pth, type = pkgTypes, Rversion = R.version)          pkgAvail(pth, type = \"source\")          # Add new packages (from CRAN) to the miniCRAN repo     addPackage(\"Matrix\", path = pth, repos = mirror, type = pkgTypes)          # Delete temporary folder     unlink(pth, recursive = TRUE)   } }"},{"path":"https://andrie.github.io/miniCRAN/reference/addPackageListingGithub.html","id":null,"dir":"Reference","previous_headings":"","what":"Add DESCRIPTION information from package on github. â€” addPackageListingGithub","title":"Add DESCRIPTION information from package on github. â€” addPackageListingGithub","text":"Downloads DESCRIPTION file package github, parses fields adds (replaces) row available package database.","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/addPackageListingGithub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add DESCRIPTION information from package on github. â€” addPackageListingGithub","text":"","code":"addPackageListingGithub(   pdb = pkgAvail(),   repo,   username = NULL,   branch = \"main\" )"},{"path":"https://andrie.github.io/miniCRAN/reference/addPackageListingGithub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add DESCRIPTION information from package on github. â€” addPackageListingGithub","text":"pdb Package database, usually result pkgAvail() available.packages() repo Character vector. Name repository github, e.g. \"andrie/rrd\" username Optional character vector. Name repository github, e.g. \"andrie/rrd\" branch name branch, defaults \"main\"","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/addPackageListingGithub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add DESCRIPTION information from package on github. â€” addPackageListingGithub","text":"","code":"# Create package database pdb <- cranJuly2014  if (interactive()) {   pdb <- pkgAvail(repos = c(CRAN = \"https://cloud.r-project.org\"))    # Overwrite pdb with development version of miniCRAN at github   newpdb <- addPackageListingGithub(pdb = pdb, \"andrie/miniCRAN\")   newpdb[\"miniCRAN\", ]    # Add package from github that's not currently on CRAN   newpdb <- addPackageListingGithub(pdb = pdb, repo = \"tidyverse/ggplot2\", branch = \"main\")   newpdb[\"ggplot2\", ]    set.seed(1)   plot(makeDepGraph(\"ggplot2\", availPkgs = newpdb, suggests = TRUE)) }"},{"path":"https://andrie.github.io/miniCRAN/reference/basePkgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns names of base packages. â€” basePkgs","title":"Returns names of base packages. â€” basePkgs","text":"Retrieves names installed packages calling utils::installed.packages() returning packages Priority == \"base\".","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/basePkgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns names of base packages. â€” basePkgs","text":"","code":"basePkgs()"},{"path":[]},{"path":"https://andrie.github.io/miniCRAN/reference/checkVersions.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for previous versions of packages in a miniCRAN repository. â€” checkVersions","title":"Check for previous versions of packages in a miniCRAN repository. â€” checkVersions","text":"Checks previous versions, returns file paths packages multiple versions. can subsequently decide version keep.","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/checkVersions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for previous versions of packages in a miniCRAN repository. â€” checkVersions","text":"","code":"checkVersions(pkgs = NULL, path = NULL, type = \"source\", Rversion = R.version)"},{"path":"https://andrie.github.io/miniCRAN/reference/checkVersions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for previous versions of packages in a miniCRAN repository. â€” checkVersions","text":"pkgs Character vector packages installed. provided, checks files multiple package versions. path local path directory miniCRAN repo resides. type character, indicating type package download install. See install.packages(). Rversion Version R (used type source.) Defaults R.version, can specified following formats: character string two digit R version, e.g. \"3.1\" list components major minor result getRversion() result R.version","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/checkVersions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for previous versions of packages in a miniCRAN repository. â€” checkVersions","text":"Returns invisibly file paths packages multiple versions removal. list element type, consisting character vector download paths","code":""},{"path":[]},{"path":"https://andrie.github.io/miniCRAN/reference/checkVersions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for previous versions of packages in a miniCRAN repository. â€” checkVersions","text":"","code":"### `checkVersions` and `add.packages.miniCRAN` require an existing miniCRAN repo  # Specify list of packages to download mirror <- c(CRAN = \"https://cloud.r-project.org\") mirror #>                          CRAN  #> \"https://cloud.r-project.org\"  pkgs <- c(\"foreach\") pkgTypes <- c(\"source\", \"win.binary\")  if (interactive()) {   if (!is.online()) {     message(\"p3m seems to be not available.  Check your internet connection.\")   } else {     pdb <- pkgAvail(repos = mirror, type = \"source\")   } } else {   pdb <- cranJuly2014 }   if (interactive()) {   if (!is.online()) {     message(\"p3m seems to be not available.  Check your internet connection.\")   } else {     pkgList <- pkgDep(pkgs, availPkgs = pdb, repos = mirror, type = \"source\", suggests = FALSE)     pkgList   } }  # Create temporary folder for miniCRAN  if (interactive()) {   if (!is.online()) {     message(\"p3m seems to be not available.  Check your internet connection.\")   } else {     dir.create(pth <- file.path(tempdir(), \"miniCRAN\"))          # Make repo for source and win.binary     makeRepo(pkgList, path = pth, repos = mirror, type = pkgTypes)          # Add other versions of a package (and assume these were added previously)     oldVers <- data.frame(       package = c(\"foreach\", \"codetools\", \"iterators\"),       version = c(\"1.4.0\", \"0.2-7\", \"1.0.5\"),       stringsAsFactors = FALSE     )     pkgs <- oldVers$package     addOldPackage(pkgs, path = pth, vers = oldVers$version, repos = mirror, type = \"source\")     # NOTE: older binary versions would need to be build from source          # List package versions in the miniCRAN repo (produces warning about duplicates)     pkgVersionsSrc <- checkVersions(pkgs, path = pth, type = \"source\")     pkgVersionsBin <- checkVersions(pkgs, path = pth, type = \"win.binary\")          # After inspecting package versions, remove old versions     basename(pkgVersionsSrc$source) # \"foreach_1.4.0.tar.gz\"  \"foreach_1.4.2.tar.gz\"     basename(pkgVersionsBin$win.binary) # \"foreach_1.4.0.zip\"     \"foreach_1.4.2.zip\"     file.remove(c(pkgVersionsSrc$source[1], pkgVersionsBin$win.binary[1]))          # Rebuild package index after adding/removing files     updateRepoIndex(pth, type = pkgTypes, Rversion = R.version)          pkgAvail(pth, type = \"source\")          # Add new packages (from CRAN) to the miniCRAN repo     addPackage(\"Matrix\", path = pth, repos = mirror, type = pkgTypes)          # Delete temporary folder     unlink(pth, recursive = TRUE)   } }"},{"path":"https://andrie.github.io/miniCRAN/reference/cranJuly2014.html","id":null,"dir":"Reference","previous_headings":"","what":"Stored version of available.packages() â€” cranJuly2014","title":"Stored version of available.packages() â€” cranJuly2014","text":"Copy result utils::available.packages() July 1, 2014.","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/cranJuly2014.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stored version of available.packages() â€” cranJuly2014","text":"","code":"cranJuly2014"},{"path":"https://andrie.github.io/miniCRAN/reference/cranJuly2014.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Stored version of available.packages() â€” cranJuly2014","text":"matrix","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/getCranDescription.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtains DESCRIPTION metadata from CRAN for each package. â€” getCranDescription","title":"Obtains DESCRIPTION metadata from CRAN for each package. â€” getCranDescription","text":"wrapper around tools::CRAN_package_db may deprecated future versions package.","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/getCranDescription.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtains DESCRIPTION metadata from CRAN for each package. â€” getCranDescription","text":"","code":"getCranDescription(   pkg,   repos = getOption(\"repos\"),   type = \"source\",   pkgs = pkgDep(pkg, repos = repos, type = type) )"},{"path":"https://andrie.github.io/miniCRAN/reference/getCranDescription.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtains DESCRIPTION metadata from CRAN for each package. â€” getCranDescription","text":"pkg Character vector packages. repos URL(s) 'contrib' sections repositories, e.g. \"https://cran.us.r-project.org\". Passed available.packages() type Possible values (currently) \"source\", \"mac.binary\" \"win.binary\": binary types can listed downloaded installed platforms.  Passed download.packages(). pkgs Character vector packages download","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/getCranDescription.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtains DESCRIPTION metadata from CRAN for each package. â€” getCranDescription","text":"","code":"if (interactive()) {   getCranDescription(c(\"igraph\", \"ggplot2\", \"XML\"),                      repos = c(CRAN = getOption(\"minicran.mran\"))   ) }"},{"path":"https://andrie.github.io/miniCRAN/reference/is.online.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns TRUE if the p3m URL can be accessed. â€” is.online","title":"Returns TRUE if the p3m URL can be accessed. â€” is.online","text":"Returns TRUE p3m URL can accessed.","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/is.online.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns TRUE if the p3m URL can be accessed. â€” is.online","text":"","code":"is.online(url = NULL, tryHttp = TRUE)"},{"path":"https://andrie.github.io/miniCRAN/reference/is.online.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns TRUE if the p3m URL can be accessed. â€” is.online","text":"url p3m url tryHttp TRUE, also attempts http URL, compatibility older versions R","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/listFiles.html","id":null,"dir":"Reference","previous_headings":"","what":"List pre-built packages in a directory based on file extension â€” .listFiles","title":"List pre-built packages in a directory based on file extension â€” .listFiles","text":"List pre-built packages directory based file extension","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/listFiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List pre-built packages in a directory based on file extension â€” .listFiles","text":"","code":".listFiles(pkgs, path, type)"},{"path":"https://andrie.github.io/miniCRAN/reference/listFiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List pre-built packages in a directory based on file extension â€” .listFiles","text":"pkgs Character vector package names path Character string specifying directory containing packages added. type Character indicating package type (e.g., \"source\", \"win.binary\", etc.).","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/listFiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List pre-built packages in a directory based on file extension â€” .listFiles","text":"Installs packages returns new package index.","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/listFiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List pre-built packages in a directory based on file extension â€” .listFiles","text":"","code":"if (FALSE) {  .listFiles('path/to/my/packages', type = \"source\") }"},{"path":"https://andrie.github.io/miniCRAN/reference/makeDepGraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Create dependency graph from available packages. â€” makeDepGraph","title":"Create dependency graph from available packages. â€” makeDepGraph","text":"package node, dependency edge","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/makeDepGraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create dependency graph from available packages. â€” makeDepGraph","text":"","code":"makeDepGraph(   pkg,   availPkgs,   repos = getOption(\"repos\"),   type = \"source\",   suggests = TRUE,   enhances = FALSE,   includeBasePkgs = FALSE,   ... )"},{"path":"https://andrie.github.io/miniCRAN/reference/makeDepGraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create dependency graph from available packages. â€” makeDepGraph","text":"pkg Character vector packages. availPkgs Data frame element called package. package element vector available packages.  Defaults reading list CRAN, using available.packages() repos URL(s) 'contrib' sections repositories, e.g. \"https://cran.us.r-project.org\". Passed available.packages() type Possible values (currently) \"source\", \"mac.binary\" \"win.binary\": binary types can listed downloaded installed platforms.  Passed download.packages(). suggests TRUE, retrieves Suggests dependencies (non-recursively) enhances TRUE, retrieves Enhances dependencies (non-recursively) includeBasePkgs TRUE, include base R packages results ... arguments passed available.packages()","code":""},{"path":[]},{"path":"https://andrie.github.io/miniCRAN/reference/makeDepGraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create dependency graph from available packages. â€” makeDepGraph","text":"","code":"if (interactive()) {   availPkgs <- cranJuly2014      availPkgs <- pkgAvail(     repos = c(CRAN = \"https://cloud.r-project.org\"),     type = \"source\"   )         # Create dependency graph using stored database of available packages   p <- makeDepGraph(     c(\"ggplot2\", \"forecast\"),     availPkgs = availPkgs   )      if(require(igraph)) plot(p)    # Create dependency graph using newly retrieved database from CRAN      p <- makeDepGraph(     c(\"ggplot2\", \"forecast\"),     repos = c(CRAN = getOption(\"minicran.mran\")),     type = \"source\"   )   if(requireNamespace(\"igraph\", quietly = TRUE)) {     plot(p)   } else {     message(\"install package `igraph` to view dependency graph\")   }    }"},{"path":"https://andrie.github.io/miniCRAN/reference/makeLibrary.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated function to download packages to local folder. â€” makeLibrary","title":"Deprecated function to download packages to local folder. â€” makeLibrary","text":"Deprecated function download packages local folder.","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/makeLibrary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated function to download packages to local folder. â€” makeLibrary","text":"","code":"makeLibrary(pkgs, path, type = \"source\")"},{"path":"https://andrie.github.io/miniCRAN/reference/makeLibrary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated function to download packages to local folder. â€” makeLibrary","text":"pkgs Character vector packages download path Destination download path. path root folder new repository. type Possible values (currently) \"source\", \"mac.binary\" \"win.binary\": binary types can listed downloaded installed platforms.  Passed download.packages().","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/makeRepo.html","id":null,"dir":"Reference","previous_headings":"","what":"Downloads packages from CRAN to specified path and creates a local\nrepository. â€” makeRepo","title":"Downloads packages from CRAN to specified path and creates a local\nrepository. â€” makeRepo","text":"Given list packages, downloads packages specified destination folder using required CRAN folder structure, finally creates PACKAGES index file.  Since folder structure mimics required structure files CRAN repository, supports functions like utils::install.packages().","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/makeRepo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downloads packages from CRAN to specified path and creates a local\nrepository. â€” makeRepo","text":"","code":"makeRepo(   pkgs,   path,   repos = getOption(\"repos\"),   type = \"source\",   Rversion = R.version,   download = TRUE,   writePACKAGES = TRUE,   quiet = FALSE )  updateRepoIndex(path, type = \"source\", Rversion = R.version)"},{"path":"https://andrie.github.io/miniCRAN/reference/makeRepo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downloads packages from CRAN to specified path and creates a local\nrepository. â€” makeRepo","text":"pkgs Character vector packages download path Destination download path. path root folder new repository. repos URL(s) 'contrib' sections repositories, e.g. \"https://cran.us.r-project.org\". Passed available.packages() type Possible values (currently) \"source\", \"mac.binary\" \"win.binary\": binary types can listed downloaded installed platforms.  Passed download.packages(). Rversion Version R (used type source.) Defaults R.version, can specified following formats: character string two digit R version, e.g. \"3.1\" list components major minor result getRversion() result R.version download TRUE downloads packages. writePACKAGES TRUE, calls write_PACKAGES() update repository PACKAGES file. quiet TRUE, suppress status messages (), progress bar download.","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/makeRepo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downloads packages from CRAN to specified path and creates a local\nrepository. â€” makeRepo","text":"character vector downloaded package files","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/makeRepo.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Downloads packages from CRAN to specified path and creates a local\nrepository. â€” makeRepo","text":"Internally makes use utils::download.packages() write_PACKAGES()","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/makeRepo.html","id":"repo-folder-structure","dir":"Reference","previous_headings":"","what":"Repo folder structure","title":"Downloads packages from CRAN to specified path and creates a local\nrepository. â€” makeRepo","text":"repository two main folders, one source packages, binary packages.  Inside binary package folder, bin, find subfolders Windows well various OSX binaries. +- Root ...+- src/contrib ......+- PACKAGES ..+- bin .......+- windows/contrib/version ..........+- PACKAGES .......+-  macosx/contrib/version ..........+-  PACKAGES .......+-  macosx/mavericks/contrib/version ..........+-  PACKAGES .......+-  macosx/leopard/contrib/version ..........+- PACKAGES","code":""},{"path":[]},{"path":"https://andrie.github.io/miniCRAN/reference/makeRepo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downloads packages from CRAN to specified path and creates a local\nrepository. â€” makeRepo","text":"","code":"# Specify list of packages to download mirror <- c(CRAN = \"https://cloud.r-project.org\") pkgs <- c(\"foreach\")  if (interactive()) {   pdb <- cranJuly2014      pdb <- pkgAvail(     repos = c(CRAN = getOption(\"minicran.mran\")),     type = \"source\"   )      pkgList <- pkgDep(pkgs, availPkgs = pdb, repos = mirror,                     type = \"source\", suggests = FALSE)   pkgList         # Create temporary folder for miniCRAN   dir.create(pth <- file.path(tempdir(), \"miniCRAN\"))      # Make repo for source and win.binary   makeRepo(pkgList, path = pth, repos = mirror, type = \"source\")      # List all files in miniCRAN   list.files(pth, recursive = TRUE)      # Check for available packages   pkgAvail(repos = pth, type = \"source\")      # Repeat process for windows binaries   makeRepo(pkgList, path = pth, repos = mirror, type = \"win.binary\")   pkgAvail(repos = pth, type = \"win.binary\")      # Delete temporary folder   unlink(pth, recursive = TRUE) }"},{"path":"https://andrie.github.io/miniCRAN/reference/miniCRAN-package.html","id":null,"dir":"Reference","previous_headings":"","what":"description â€” miniCRAN-package","title":"description â€” miniCRAN-package","text":"end 2014, CRAN consisted 6,000 packages.  Many organisations need maintain private mirror CRAN, subset packages relevant .","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/miniCRAN-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"description â€” miniCRAN-package","text":"miniCRAN makes possible create internally consistent repository consisting selected packages CRAN-like repositories.  user specifies set desired packages, miniCRAN recursively reads dependency tree packages, downloads subset. many reasons creating complete mirror CRAN using rsync: may wish mirror subset CRAN, security, legal compliance -house reason may wish restrict internal package use subset public packages, minimize package duplication, reasons coding standards may wish make packages available public repositories CRAN, e.g. BioConductor, r-forge, OmegaHat, etc. may wish add custom -house packages repository ambition miniCRAN eventually satisfy considerations.","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/miniCRAN-package.html","id":"making-a-private-repo","dir":"Reference","previous_headings":"","what":"Making a private repo","title":"description â€” miniCRAN-package","text":"pkgAvail(): Read local (remote) CRAN-like repository determine available packages. pkgDep(): Find (recursive) package dependencies. makeRepo() : Make mini CRAN repository, downloading packages (dependencies) creating appropriate file structure repository.  allows use functions like utils::available.packages() utils::install.packages() local repository. subset internally consistent, .e. following functions work expected: utils::available.packages() utils::install.packages() main function makeRepo() - download required packages, dependencies, appropriate repository file structure, create repository index (PACKAGES) file.","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/miniCRAN-package.html","id":"updating-packages-in-a-repo","dir":"Reference","previous_headings":"","what":"Updating packages in a repo","title":"description â€” miniCRAN-package","text":"oldPackages(): Indicates packages (suitable) later version repositories * updatePackages(): Offers download install packages","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/miniCRAN-package.html","id":"creating-dependencies","dir":"Reference","previous_headings":"","what":"Creating dependencies","title":"description â€” miniCRAN-package","text":"get recursive list dependencies well plot, use pkgDep() followed  makeDepGraph(). pkgDep(): Find (recursive) package dependencies. makeDepGraph(): Create graph selected package dependencies. plot.pkgDepGraph(): Create visualization dependency graph","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/miniCRAN-package.html","id":"package-options","dir":"Reference","previous_headings":"","what":"Package options","title":"description â€” miniCRAN-package","text":"minicran.mran preferred p3m URL. Defaults https://packagemanager.posit.co/cran R versions 3.2.2 greater. Versions earlier 3.2.2 use HTTP instead HTTPS.","code":""},{"path":[]},{"path":"https://andrie.github.io/miniCRAN/reference/miniCRAN-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"description â€” miniCRAN-package","text":"Maintainer: Andrie de Vries apdevries@gmail.com [copyright holder] contributors: Alex Chubaty alex.chubaty@gmail.com [contributor] Microsoft Corporation [copyright holder]","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/pkgAvail.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads available packages from CRAN repository. â€” pkgAvail","title":"Reads available packages from CRAN repository. â€” pkgAvail","text":"thin wrapper around utils::available.packages().  argument path supplied, function attempts read local repository, otherwise attempts read CRAN mirror repos url.","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/pkgAvail.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads available packages from CRAN repository. â€” pkgAvail","text":"","code":"pkgAvail(   repos = getOption(\"repos\"),   type = \"source\",   Rversion = R.version,   quiet = FALSE,   filters = NULL )"},{"path":"https://andrie.github.io/miniCRAN/reference/pkgAvail.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads available packages from CRAN repository. â€” pkgAvail","text":"repos URL(s) 'contrib' sections repositories, e.g. \"https://cran.us.r-project.org\". Passed available.packages() type Possible values (currently) \"source\", \"mac.binary\" \"win.binary\": binary types can listed downloaded installed platforms.  Passed download.packages(). Rversion Version R (used type source.) Defaults R.version, can specified following formats: character string two digit R version, e.g. \"3.1\" list components major minor result getRversion() result R.version quiet TRUE, suppresses warnings filters passed utils::available.packages","code":""},{"path":[]},{"path":"https://andrie.github.io/miniCRAN/reference/pkgDep.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves package dependencies. â€” pkgDep","title":"Retrieves package dependencies. â€” pkgDep","text":"Performs recursive retrieve Depends, Imports LinkLibrary. Performs non-recursive retrieve Suggests.","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/pkgDep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves package dependencies. â€” pkgDep","text":"","code":"pkgDep(   pkg,   availPkgs,   repos = getOption(\"repos\"),   type = \"source\",   depends = TRUE,   suggests = TRUE,   enhances = FALSE,   includeBasePkgs = FALSE,   Rversion = R.version,   quiet = FALSE,   ... )"},{"path":"https://andrie.github.io/miniCRAN/reference/pkgDep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves package dependencies. â€” pkgDep","text":"pkg Character vector packages. availPkgs Data frame element called package. package element vector available packages.  Defaults reading list CRAN, using available.packages() repos URL(s) 'contrib' sections repositories, e.g. \"https://cran.us.r-project.org\". Passed available.packages() type Possible values (currently) \"source\", \"mac.binary\" \"win.binary\": binary types can listed downloaded installed platforms.  Passed download.packages(). depends TRUE, retrieves Depends, Imports LinkingTo dependencies (non-recursively) suggests TRUE, retrieves Suggests dependencies (non-recursively) enhances TRUE, retrieves Enhances dependencies (non-recursively) includeBasePkgs TRUE, include base R packages results Rversion Version R (used type source.) Defaults R.version, can specified following formats: character string two digit R version, e.g. \"3.1\" list components major minor result getRversion() result R.version quiet TRUE, suppresses warnings ... arguments passed available.packages()","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/pkgDep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieves package dependencies. â€” pkgDep","text":"character vector package names","code":""},{"path":[]},{"path":"https://andrie.github.io/miniCRAN/reference/pkgDep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieves package dependencies. â€” pkgDep","text":"","code":"if (interactive()) {   pkgDep(pkg = c(\"ggplot2\", \"plyr\", \"reshape2\"),          repos = c(CRAN = \"https://cloud.r-project.org\")   )      pdb <- cranJuly2014   pdb <- pkgAvail(repos = c(CRAN = getOption(\"minicran.mran\")))      pkgDep(pkg = c(\"ggplot2\", \"plyr\", \"reshape2\"), pdb)    }"},{"path":"https://andrie.github.io/miniCRAN/reference/plot.pkgDepGraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots a package dependency graph. â€” plot.pkgDepGraph","title":"Plots a package dependency graph. â€” plot.pkgDepGraph","text":"Plots package dependency graph.","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/plot.pkgDepGraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots a package dependency graph. â€” plot.pkgDepGraph","text":"","code":"# S3 method for pkgDepGraph plot(   x,   pkgsToHighlight,   main = paste(attr(x, \"pkgs\"), collapse = \", \"),   legendPosition = c(-1.2, -1),   shape = \"circle\",   vertex.size = 8,   cex = 1,   ... )"},{"path":"https://andrie.github.io/miniCRAN/reference/plot.pkgDepGraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots a package dependency graph. â€” plot.pkgDepGraph","text":"x Object plot pkgsToHighlight Optional character vector names package highlight. missing, defaults packages used original call makeDepGraph() main Title plot legendPosition Numeric vector length 2, indicating (x, y) position edge legend. values range [-1; 1].  NULL, edge legend displayed. shape Shape edge.  See igraph::igraph.plotting(). \"none\", \"circle\", \"square\", ... vertex.size Size vertex shape. igraph::igraph.plotting() cex Vertex label size. ... Ignored","code":""},{"path":[]},{"path":"https://andrie.github.io/miniCRAN/reference/plot.pkgDepGraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots a package dependency graph. â€” plot.pkgDepGraph","text":"","code":"tags <- \"chron\"  # Plot using defaults  if (interactive()){   pdb <- pkgAvail(     repos = c(CRAN = getOption(\"minicran.mran\")),     type = \"source\"   ) } else {   pdb <- cranJuly2014 }   if (interactive()) {   dg <- makeDepGraph(tags, availPkgs = pdb  , includeBasePkgs = FALSE,                      suggests = TRUE, enhances = TRUE)      set.seed(43);   plot(dg)         # Move edge legend to top left   set.seed(42);   plot(dg, legendPosition = c(-1, 1))      # Change font size and shape size   set.seed(42);   plot(dg, legendPosition = c(-1, 1), vertex.size = 20,  cex = 0.5)         # Move vertex legend to top right   set.seed(42);   plot(dg, legendPosition = c(1, 1), vertex.size = 20,  cex = 0.5) }"},{"path":"https://andrie.github.io/miniCRAN/reference/repoPrefix.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the path to the repo directory containing the package files. â€” repoPrefix","title":"Get the path to the repo directory containing the package files. â€” repoPrefix","text":"Get path repo directory containing package files.","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/repoPrefix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the path to the repo directory containing the package files. â€” repoPrefix","text":"","code":"repoPrefix(type, Rversion)"},{"path":"https://andrie.github.io/miniCRAN/reference/repoPrefix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the path to the repo directory containing the package files. â€” repoPrefix","text":"type character, indicating type package download install. See install.packages(). Rversion Version R (used type source.) Defaults R.version, can specified following formats: character string two digit R version, e.g. \"3.1\" list components major minor result getRversion() result R.version","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/repoPrefix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the path to the repo directory containing the package files. â€” repoPrefix","text":"file path package files directory.","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/repoPrefix.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get the path to the repo directory containing the package files. â€” repoPrefix","text":"versions R compatible package types (e.g., mac.binary.el-capitan valid R > 3.4.0).","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/repoPrefix.html","id":"repo-folder-structure","dir":"Reference","previous_headings":"","what":"Repo folder structure","title":"Get the path to the repo directory containing the package files. â€” repoPrefix","text":"repository two main folders, one source packages, binary packages.  Inside binary package folder, bin, find subfolders Windows well various OSX binaries. +- Root ...+- src/contrib ......+- PACKAGES ..+- bin .......+- windows/contrib/version ..........+- PACKAGES .......+-  macosx/contrib/version ..........+-  PACKAGES .......+-  macosx/mavericks/contrib/version ..........+-  PACKAGES .......+-  macosx/leopard/contrib/version ..........+- PACKAGES","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/twodigitRversion.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a two-digit version of the R version â€” twodigitRversion","title":"Get a two-digit version of the R version â€” twodigitRversion","text":"Get two-digit version R version","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/twodigitRversion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a two-digit version of the R version â€” twodigitRversion","text":"","code":"twodigitRversion(Rversion = R.version)"},{"path":"https://andrie.github.io/miniCRAN/reference/twodigitRversion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a two-digit version of the R version â€” twodigitRversion","text":"Rversion Version R (used type source.) Defaults R.version, can specified following formats: character string two digit R version, e.g. \"3.1\" list components major minor result getRversion() result R.version","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/twodigitRversion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a two-digit version of the R version â€” twodigitRversion","text":"character string representing two-digit R version.","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/updatePackages.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for available package updates in a miniCRAN repo. â€” updatePackages","title":"Check for available package updates in a miniCRAN repo. â€” updatePackages","text":"oldPackages() indicates packages (suitable) later version repositories whereas updatePackages() offers download install packages.","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/updatePackages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for available package updates in a miniCRAN repo. â€” updatePackages","text":"","code":"oldPackages(   path = NULL,   repos = getOption(\"repos\"),   availPkgs = pkgAvail(repos = repos, type = type, Rversion = Rversion),   method,   availableLocal = pkgAvail(repos = path, type = type, Rversion = Rversion, quiet =     quiet),   type = \"source\",   Rversion = R.version,   quiet = FALSE )  updatePackages(   path = NULL,   repos = getOption(\"repos\"),   method = NULL,   ask = TRUE,   availPkgs = pkgAvail(repos = repos, type = type, Rversion = Rversion),   oldPkgs = NULL,   type = \"source\",   Rversion = R.version,   quiet = FALSE )"},{"path":"https://andrie.github.io/miniCRAN/reference/updatePackages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for available package updates in a miniCRAN repo. â€” updatePackages","text":"path Destination download path. path root folder new repository. repos URL(s) 'contrib' sections repositories, e.g. \"https://cran.us.r-project.org\". Passed available.packages() availPkgs Data frame element called package. package element vector available packages.  Defaults reading list CRAN, using available.packages() method Download method, see download.file(). availableLocal packages hosted miniCRAN repo, returned pkgAvail(). subset can specified; currently must (character matrix) format returned pkgAvail(). type Possible values (currently) \"source\", \"mac.binary\" \"win.binary\": binary types can listed downloaded installed platforms.  Passed download.packages(). Rversion Version R (used type source.) Defaults R.version, can specified following formats: character string two digit R version, e.g. \"3.1\" list components major minor result getRversion() result R.version quiet TRUE, suppress status messages (), progress bar download. ask logical indicating whether ask user packages actually downloaded installed.  Alternatively, value \"graphics\" starts interactive widget allow user (de-)select list packages updated added. latter value works systems GUI version select.list(), otherwise equivalent ask = TRUE. oldPkgs specified non-NULL, updatePackages() considers packages updating. may character vector package names matrix returned oldPackages().","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/updatePackages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for available package updates in a miniCRAN repo. â€” updatePackages","text":"oldPackages() returns matrix one row per package columns \"Package\", \"LocalVer\", \"ReposVer\" \"Repository\".  matrix row names package names. updatePackages returns NULL invisibly.","code":""},{"path":"https://andrie.github.io/miniCRAN/reference/updatePackages.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check for available package updates in a miniCRAN repo. â€” updatePackages","text":"functions based update.packages().  However, rather looking locally installed packages look package source binaries miniCRAN repository.","code":""},{"path":[]},{"path":"https://andrie.github.io/miniCRAN/reference/updatePackages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for available package updates in a miniCRAN repo. â€” updatePackages","text":"","code":"### `oldPackages` and `updatePackages` require an existing miniCRAN repo  # Specify list of packages to download mirror <- c(CRAN = \"https://cloud.r-project.org\") pkgs <- c(\"foreach\")  pdb <- cranJuly2014  if (interactive()) {   pdb <- pkgAvail(repos = mirror, type = \"source\")      pkgList <- pkgDep(pkgs, availPkgs = pdb, repos = mirror, type = \"source\", suggests = FALSE)   pkgList      # Create temporary folder for miniCRAN   dir.create(pth <- file.path(tempdir(), \"miniCRAN\"))      # create the miniCRAN directory structure but only add bin files   makeRepo(pkgList, path = pth, repos = mirror, type = \"source\", download = FALSE)   makeRepo(pkgList, path = pth, repos = mirror, type = \"win.binary\", download = TRUE)      # download old source package version and create repo index   oldVers <- data.frame(package = c(\"foreach\", \"codetools\", \"iterators\"),                         version = c(\"1.4.0\", \"0.2-7\", \"1.0.5\"),                         stringsAsFactors = FALSE)   addOldPackage(pkgList, path = pth, repos = mirror, vers = oldVers$version, type = \"source\")   # NOTE: older binary versions would need to be build from source      # Check if updated packages are available   oldPackages(path = pth, repos = mirror, type = \"source\") # should need update   oldPackages(path = pth, repos = mirror, type = \"win.binary\") # should be current      # Update available packages   updatePackages(path = pth, repos = mirror, type = \"source\", ask = FALSE) # should need update   updatePackages(path = pth, repos = mirror, type = \"win.binary\") # should be current      # Delete temporary folder   unlink(pth, recursive = TRUE) }"}]
